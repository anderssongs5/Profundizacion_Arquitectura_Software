/**
 */
package Cinema_ProfArq.provider;

import Cinema_ProfArq.util.Cinema_ProfArqAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Cinema_ProfArqItemProviderAdapterFactory extends Cinema_ProfArqAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Cinema_ProfArqItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Cinema} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CinemaItemProvider cinemaItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Cinema}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCinemaAdapter() {
		if (cinemaItemProvider == null) {
			cinemaItemProvider = new CinemaItemProvider(this);
		}

		return cinemaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.City} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CityItemProvider cityItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.City}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCityAdapter() {
		if (cityItemProvider == null) {
			cityItemProvider = new CityItemProvider(this);
		}

		return cityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Classification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassificationItemProvider classificationItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Classification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassificationAdapter() {
		if (classificationItemProvider == null) {
			classificationItemProvider = new ClassificationItemProvider(this);
		}

		return classificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Country} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountryItemProvider countryItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Country}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountryAdapter() {
		if (countryItemProvider == null) {
			countryItemProvider = new CountryItemProvider(this);
		}

		return countryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Status} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusItemProvider statusItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Status}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusAdapter() {
		if (statusItemProvider == null) {
			statusItemProvider = new StatusItemProvider(this);
		}

		return statusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Theater} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheaterItemProvider theaterItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Theater}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheaterAdapter() {
		if (theaterItemProvider == null) {
			theaterItemProvider = new TheaterItemProvider(this);
		}

		return theaterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Director} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectorItemProvider directorItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Director}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectorAdapter() {
		if (directorItemProvider == null) {
			directorItemProvider = new DirectorItemProvider(this);
		}

		return directorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Film} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilmItemProvider filmItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Film}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilmAdapter() {
		if (filmItemProvider == null) {
			filmItemProvider = new FilmItemProvider(this);
		}

		return filmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Billboard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BillboardItemProvider billboardItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Billboard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBillboardAdapter() {
		if (billboardItemProvider == null) {
			billboardItemProvider = new BillboardItemProvider(this);
		}

		return billboardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.AudioFormat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioFormatItemProvider audioFormatItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.AudioFormat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioFormatAdapter() {
		if (audioFormatItemProvider == null) {
			audioFormatItemProvider = new AudioFormatItemProvider(this);
		}

		return audioFormatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Language} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LanguageItemProvider languageItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Language}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLanguageAdapter() {
		if (languageItemProvider == null) {
			languageItemProvider = new LanguageItemProvider(this);
		}

		return languageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.VideoFormat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VideoFormatItemProvider videoFormatItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.VideoFormat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVideoFormatAdapter() {
		if (videoFormatItemProvider == null) {
			videoFormatItemProvider = new VideoFormatItemProvider(this);
		}

		return videoFormatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Genre} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenreItemProvider genreItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Genre}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenreAdapter() {
		if (genreItemProvider == null) {
			genreItemProvider = new GenreItemProvider(this);
		}

		return genreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Show} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShowItemProvider showItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Show}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShowAdapter() {
		if (showItemProvider == null) {
			showItemProvider = new ShowItemProvider(this);
		}

		return showItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Room} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomItemProvider roomItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Room}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomAdapter() {
		if (roomItemProvider == null) {
			roomItemProvider = new RoomItemProvider(this);
		}

		return roomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Seat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SeatItemProvider seatItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Seat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSeatAdapter() {
		if (seatItemProvider == null) {
			seatItemProvider = new SeatItemProvider(this);
		}

		return seatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Rate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RateItemProvider rateItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Rate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRateAdapter() {
		if (rateItemProvider == null) {
			rateItemProvider = new RateItemProvider(this);
		}

		return rateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Member} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemberItemProvider memberItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Member}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemberAdapter() {
		if (memberItemProvider == null) {
			memberItemProvider = new MemberItemProvider(this);
		}

		return memberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Card} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardItemProvider cardItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Card}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardAdapter() {
		if (cardItemProvider == null) {
			cardItemProvider = new CardItemProvider(this);
		}

		return cardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Cinema_ProfArq.Reserve} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReserveItemProvider reserveItemProvider;

	/**
	 * This creates an adapter for a {@link Cinema_ProfArq.Reserve}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReserveAdapter() {
		if (reserveItemProvider == null) {
			reserveItemProvider = new ReserveItemProvider(this);
		}

		return reserveItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cinemaItemProvider != null) cinemaItemProvider.dispose();
		if (cityItemProvider != null) cityItemProvider.dispose();
		if (classificationItemProvider != null) classificationItemProvider.dispose();
		if (countryItemProvider != null) countryItemProvider.dispose();
		if (statusItemProvider != null) statusItemProvider.dispose();
		if (theaterItemProvider != null) theaterItemProvider.dispose();
		if (directorItemProvider != null) directorItemProvider.dispose();
		if (filmItemProvider != null) filmItemProvider.dispose();
		if (billboardItemProvider != null) billboardItemProvider.dispose();
		if (audioFormatItemProvider != null) audioFormatItemProvider.dispose();
		if (languageItemProvider != null) languageItemProvider.dispose();
		if (videoFormatItemProvider != null) videoFormatItemProvider.dispose();
		if (genreItemProvider != null) genreItemProvider.dispose();
		if (showItemProvider != null) showItemProvider.dispose();
		if (roomItemProvider != null) roomItemProvider.dispose();
		if (seatItemProvider != null) seatItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (rateItemProvider != null) rateItemProvider.dispose();
		if (memberItemProvider != null) memberItemProvider.dispose();
		if (cardItemProvider != null) cardItemProvider.dispose();
		if (reserveItemProvider != null) reserveItemProvider.dispose();
	}

}
